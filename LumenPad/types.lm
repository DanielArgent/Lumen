[constructor]
let person(name: str, age: num) { 
    this.name := name
    this.age := age 
}

let person.str() := 
    "(" + this.name + ", " + this.age + ")"

let person.is_valid() := 
    this.age >= 18

[constructor]
let company(kind) := 
    this.value := kind

let company.str() {
    if this.value = 0:
        return "Microsoft"
    if this.value = 1:
        return "Google"
    if this.value = 2:
        return "Yandex"
}
    
let company.=(other) := this.value = other.value

company.Microsoft := company(0)
company.Google := company(1)
company.Yandex := company(2)

[derived(person)]
let employee(name: str, age: num, place) {
    base(name, age)
    this.place := place 
}

let employee.works_on(company) := this.place = company

[constructor]
let node(value, next_node:=void) {
    this.value := value
    this.next_node := next_node
}

let node.str() :=
    "(" + this.value + ", " 
     + (if this.next_node is void: "" 
        else: this.next_node.str()) + ")"
 
[constructor]
let linked_list() {
    this.first := void
    this.last := void
    this.count := 0
}

let linked_list.append_one(value) {
    let n := node(value)
    if this.first is void {
        this.first := n
        this.last := n
    } else {
        this.last.next_node := n
        this.last := n
    }
    this.count := this.count + 1
}

let linked_list.append(...args) :=
    for let i in args:
        this.append_one(i)

let linked_list.str() := 
    this.first.str()

let linked_list.c(...args) {
    let result := linked_list()
    for let i in args {
        result.append_one(i)
    }
    return result
}