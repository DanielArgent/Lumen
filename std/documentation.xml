<?xml version="1.0" encoding="utf-8" ?>
<documentation>
  <module name="Prelude">
    
    <class name="Collection">
      <definition>
        type Collection = class
          implements Functor
          implements Applicative
      </definition>
      
      <implements class="Functor"/>
      <implements class="Applicative"/>

      <require name="toStream">
        <argument name="self" type="'T"></argument>
        <returns type="Stream"></returns>
      </require>

      <function name="fromStream">
        <definition>
          let fromStream stream: Stream
        </definition>

        <argument name="stream" type="Stream"></argument>
        <returns type="'T"></returns>
      </function>

      <function name="average">
        <definition>
          let average self: Collection
        </definition>

        <description>
          Вычисляет и возвращает среднее из элементов коллекции
        </description>

        <warning>
          Каждый элемент коллекции должен поддерживать операцию сложения с любым 
          другим элементом коллекции, результат сложения всех элементов должен поддерживать операцию
          деления на целое число.
        </warning>

        <raise name="InvalidArgument"></raise>
        <raise name="CollectionIsEmpty"></raise>
        <raise name="InvalidOperation"></raise>

        <argument name="self" type="Collection">коллекция</argument>
        <returns>среднее элементов коллекции</returns>
      </function>

      <function name="fold">
        <definition>
          let fold (folder: Function) (self: Collection)
        </definition>

        <description>
          Производит левую свёртку
        </description>

        <raise name="InvalidArgument"></raise>
        <raise name="CollectionIsEmpty"></raise>

        <argument name="folder" type="Function">функция свёртки</argument>
        <argument name="self" type="Collection">коллекция</argument>
        <returns>среднее элементов коллекции</returns>
      </function>
    </class>
  </module>
</documentation>