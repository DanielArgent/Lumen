// Erathosphene sieve
let primes xs =
    let sieve [] = []
    let sieve p::xs =
    p :: rec [for i in xs if i.mod p > 0: i]
    return sieve xs

// Erathosphene sieve with tail recursion
let primes' xs =
    let sieve res [] = res
    let sieve res x::xs =
        tailrec (res + [x]) [for i in xs if i.mod x > 0: i]
    return sieve [] xs


print (primes [for i in 2...10: i])  //-> [2, 3, 5, 7] 
print (primes' [for i in 2...10: i]) //-> [2, 3, 5, 7] 

let mod = Number.mod

let primes [] = []
let primes p::xs =
    p :: rec [for i in xs if mod i p > 0: i]

let primes''' [] = [] 
let primes''' x::xs =
    x :: rec xs.[fun i -> mod i x > 0]

// Erathosphene sieve with tail recursion
let primes' xs =
    let sieve res [] = res
    let sieve res x::xs =
        tailrec (res + [x]) [for i in xs if mod i x > 0: i]
    return sieve [] xs

let primes'' xs =
    let sieve res [] = res
    let sieve res x::xs =
        tailrec (res + [x]) xs.[fun i -> mod i x > 0]
    return sieve [] xs

print (primes [for i in 2...10: i])  //-> [2, 3, 5, 7] 
print (primes' [for i in 2...10: i]) //-> [2, 3, 5, 7] 
print (primes'' [for i in 2...10: i]) //-> [2, 3, 5, 7] 
print (primes''' [for i in 2...10: i]) //-> [2, 3, 5, 7] 